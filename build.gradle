buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath 'com.palantir:jacoco-coverage:0.4.0'
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.openapi.generator"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    id "org.liquibase.gradle"
    id "org.sonarqube"
    id "io.spring.nohttp"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.idevhub.tapas"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=11
targetCompatibility=11
assert System.properties["java.specification.version"] == "1.8" || "11" || "12" || "13" || "14"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/swagger.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}"
        }
    }
    appengineStage.dependsOn thinResolve
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClassName = "com.idevhub.tapas.UaaApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }

    test {
        jacoco {
            excludes += ['build/generated/**']
        }
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }

    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver "org.postgresql.Driver"
            url "jdbc:postgresql://localhost:5432/uaa"
            username "uaa"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "org.postgresql.Driver"
            url "jdbc:postgresql://localhost:5432/uaa"
            username "uaa"
            password ""
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.idevhub.tapas.domain?dialect=io.github.jhipster.domain.util.FixedPostgreSQL10Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion '${checkstyle_version}'
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    all {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
            force 'org.liquibase:liquibase-core:3.9.0'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://artifactory.customs.net.ua/artifactory/libs-release"
        credentials {
            username 'idevhub'
            password 'CZ3GAzNq6JWj'
        }

        //jhipster-needle-gradle-repositories - JHipster will add additional repositories

}    }

dependencies {
    // Child modules
    implementation project(':privilege-check')

    // import JHipster dependencies BOM


  //  implementation (group: 'com.idevhub.crypto', name: 'crypto-model', version: '0.0.2')


    // https://mvnrepository.com/artifact/com.nimbusds/nimbus-jose-jwt
    compile group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.5'


    // https://mvnrepository.com/artifact/org.springframework.retry/spring-retry
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.0'

    // Custom library
    implementation 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation group: 'org.apache.poi', name: 'poi', version: '4.1.2'

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "io.github.jhipster", name: "jhipster-framework", version: "3.7.1"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "org.springframework.boot:spring-boot-starter-cache:2.2.7.RELEASE"
    implementation "io.dropwizard.metrics:metrics-core:4.1.7"
    implementation "io.micrometer:micrometer-registry-prometheus:1.4.2"
    implementation "net.logstash.logback:logstash-logback-encoder:6.3"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:2.10.4"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.4"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.10.4"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.10.4"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.10.4"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.10.4"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.10.4"
    implementation "com.hazelcast:hazelcast:3.12.7"
    implementation "com.hazelcast:hazelcast-hibernate53:1.3.2"
    implementation "com.hazelcast:hazelcast-spring:3.12.7"
    implementation "javax.cache:cache-api:1.1.1"
    implementation "org.hibernate:hibernate-core:5.4.15.Final"
    implementation "com.zaxxer:HikariCP:3.4.3"
    implementation "org.openapitools:jackson-databind-nullable:${jackson_databind_nullable_version}"
    implementation "org.apache.commons:commons-lang3:3.9"
    implementation group: "org.apache.httpcomponents", name: "httpclient", version: "4.5.12"
    implementation "commons-io:commons-io:2.6"
    implementation "javax.transaction:javax.transaction-api:1.3"
    implementation "org.hibernate:hibernate-entitymanager:5.4.15.Final"
    implementation "org.hibernate.validator:hibernate-validator:6.0.19.Final"
    implementation "org.liquibase:liquibase-core:3.9.0"
    liquibaseRuntime "org.liquibase:liquibase-core:3.9.0"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath
    implementation "org.springframework.boot:spring-boot-loader-tools:2.2.7.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-mail:2.2.7.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-logging:2.2.7.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-actuator:2.2.7.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-aop:2.2.7.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:2.2.7.RELEASE"
    testImplementation "org.testcontainers:postgresql:1.14.1"
    implementation "org.apache.kafka:kafka-clients:2.5.0"
    implementation "org.springframework.boot:spring-boot-starter-security:2.2.7.RELEASE"

    implementation ("org.springframework.boot:spring-boot-starter-web:2.2.7.RELEASE") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow:2.2.7.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:2.2.7.RELEASE"
    implementation "org.zalando:problem-spring-web:0.25.2"
    implementation "org.springframework.cloud:spring-cloud-starter:2.2.2.RELEASE"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon:2.2.2.RELEASE"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.2.2.RELEASE"
    implementation "org.springframework.retry:spring-retry:1.2.5.RELEASE"
    implementation "io.sentry:sentry-spring:1.7.30"
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    implementation "org.springframework.cloud:spring-cloud-starter-kubernetes:1.1.2.RELEASE"
    implementation group:"org.springframework.boot", name: "spring-boot-devtools", version: "2.3.2.RELEASE"
    implementation "org.springframework.cloud:spring-cloud-starter-security:2.2.1.RELEASE"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:2.2.2.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors:2.2.7.RELEASE"
    implementation "org.springframework.security:spring-security-config:5.2.4.RELEASE"
    implementation "org.springframework.security:spring-security-data:5.2.4.RELEASE"
    implementation "org.springframework.security:spring-security-web:5.2.4.RELEASE"
    implementation "org.springframework.security.oauth:spring-security-oauth2:2.3.8.RELEASE"
    implementation "org.springframework.security:spring-security-jwt:1.0.11.RELEASE"
    implementation "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    implementation ("io.springfox:springfox-swagger2:2.9.2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators:2.9.2"
    implementation "org.postgresql:postgresql:42.2.12"
    liquibaseRuntime "org.postgresql:postgresql:42.2.12"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}"
    testImplementation ("org.springframework.boot:spring-boot-starter-test:2.2.7.RELEASE") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.security:spring-security-test:5.3.3.RELEASE"
    testImplementation "org.springframework.boot:spring-boot-test:2.2.7.RELEASE"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
    testImplementation "com.h2database:h2:1.4.200"
    testImplementation "org.testcontainers:kafka:1.14.1"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

    testImplementation('org.mockito:mockito-inline:3.4.0')
}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
    bootJar.dependsOn = [createPom]
}

jacoco {
    toolVersion = "0.8.2"
}

subprojects {
    repositories {
        jcenter()
        mavenCentral()
    }

    jacocoTestReport {
        executionData(test, integrationTest)
    }

}



sonarqube {

    properties {
//        property "sonar.jacoco.reportPaths", allTestCoverageFile

        property 'sonar.exclusions', [
            '**/*Generated.java',
            '**/*UaaApp.java',
            '**/privilege-check/**',
            '**/*UaaConfiguration.java',
            '**/*_.class',
            'build/generated/**',
            '**/resources/**',
            '**/ApplicationWebXml*'
        ]
        property 'sonar.coverage.exclusions', [
            '**/*UaaApp.java',
            '**/*LoggingAspect.java',
            '**/*AuthoritiesConstants.java',
            '**/*DTO*.java',
            '**/privilege-check/**',
            'src/main/java/com/idevhub/tapas/service/validation/**',
            'src/main/java/com/idevhub/tapas/service/mapper/**',
            'src/main/java/com/idevhub/tapas/domain/**',
            'src/main/java/com/idevhub/tapas/service/utils/**',
            'src/main/java/com/idevhub/tapas/domain/constants/**',
            'src/main/java/com/idevhub/tapas/service/errors/**',
            'src/main/java/com/idevhub/tapas/service/criteria/**',
            'src/main/java/com/idevhub/tapas/config/**',
            'src/main/java/com/idevhub/tapas/client/**'

        ]
    }
}


jacocoTestCoverageVerification {

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}


task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

}

codeCoverageReport.dependsOn {
    subprojects*.test
}


task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.4.1"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
